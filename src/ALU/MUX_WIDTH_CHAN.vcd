$date
	Mon Oct 16 21:43:27 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_TB $end
$var wire 4 ! flags_n_z_v_c [3:0] $end
$var wire 32 " out [31:0] $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$var reg 4 % optcode [3:0] $end
$var reg 5 & shift [4:0] $end
$scope module my_alu $end
$var wire 32 ' R1 [31:0] $end
$var wire 32 ( R2 [31:0] $end
$var wire 32 ) R3 [31:0] $end
$var wire 4 * flags_n_z_v_c [3:0] $end
$var wire 4 + optcode [3:0] $end
$var wire 5 , shift [4:0] $end
$scope module a $end
$var wire 32 - in_a [31:0] $end
$var wire 32 . in_b [31:0] $end
$var wire 32 / out [31:0] $end
$var wire 1 0 cout $end
$var wire 33 1 carry [32:0] $end
$scope begin $gen1[25] $end
$scope module my_adder $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 cin $end
$var wire 1 5 cout $end
$var wire 1 6 sum $end
$upscope $end
$upscope $end
$scope begin $gen1[26] $end
$scope module my_adder $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin $gen1[27] $end
$scope module my_adder $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 ? cout $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$scope begin $gen1[28] $end
$scope module my_adder $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C cin $end
$var wire 1 D cout $end
$var wire 1 E sum $end
$upscope $end
$upscope $end
$scope begin $gen1[29] $end
$scope module my_adder $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H cin $end
$var wire 1 I cout $end
$var wire 1 J sum $end
$upscope $end
$upscope $end
$scope begin $gen1[30] $end
$scope module my_adder $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M cin $end
$var wire 1 N cout $end
$var wire 1 O sum $end
$upscope $end
$upscope $end
$scope begin $gen1[31] $end
$scope module my_adder $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R cin $end
$var wire 1 S cout $end
$var wire 1 T sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000000000001 $end
$scope module my_adder $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000000000001 $end
$scope module my_adder $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ cin $end
$var wire 1 ] cout $end
$var wire 1 ^ sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000000000001 $end
$scope module my_adder $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a cin $end
$var wire 1 b cout $end
$var wire 1 c sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000000001 $end
$scope module my_adder $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f cin $end
$var wire 1 g cout $end
$var wire 1 h sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000000001 $end
$scope module my_adder $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k cin $end
$var wire 1 l cout $end
$var wire 1 m sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000000001 $end
$scope module my_adder $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p cin $end
$var wire 1 q cout $end
$var wire 1 r sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000001 $end
$scope module my_adder $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u cin $end
$var wire 1 v cout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000001 $end
$scope module my_adder $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z cin $end
$var wire 1 { cout $end
$var wire 1 | sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000001 $end
$scope module my_adder $end
$var wire 1 } a $end
$var wire 1 ~ b $end
$var wire 1 !" cin $end
$var wire 1 "" cout $end
$var wire 1 #" sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000001 $end
$scope module my_adder $end
$var wire 1 $" a $end
$var wire 1 %" b $end
$var wire 1 &" cin $end
$var wire 1 '" cout $end
$var wire 1 (" sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000001 $end
$scope module my_adder $end
$var wire 1 )" a $end
$var wire 1 *" b $end
$var wire 1 +" cin $end
$var wire 1 ," cout $end
$var wire 1 -" sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000001 $end
$scope module my_adder $end
$var wire 1 ." a $end
$var wire 1 /" b $end
$var wire 1 0" cin $end
$var wire 1 1" cout $end
$var wire 1 2" sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000001 $end
$scope module my_adder $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 5" cin $end
$var wire 1 6" cout $end
$var wire 1 7" sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000001 $end
$scope module my_adder $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" cin $end
$var wire 1 ;" cout $end
$var wire 1 <" sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000001 $end
$scope module my_adder $end
$var wire 1 =" a $end
$var wire 1 >" b $end
$var wire 1 ?" cin $end
$var wire 1 @" cout $end
$var wire 1 A" sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000001 $end
$scope module my_adder $end
$var wire 1 B" a $end
$var wire 1 C" b $end
$var wire 1 D" cin $end
$var wire 1 E" cout $end
$var wire 1 F" sum $end
$upscope $end
$upscope $end
$scope begin genblk000000001 $end
$scope module my_adder $end
$var wire 1 G" a $end
$var wire 1 H" b $end
$var wire 1 I" cin $end
$var wire 1 J" cout $end
$var wire 1 K" sum $end
$upscope $end
$upscope $end
$scope begin genblk00000001 $end
$scope module my_adder $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 N" cin $end
$var wire 1 O" cout $end
$var wire 1 P" sum $end
$upscope $end
$upscope $end
$scope begin genblk0000001 $end
$scope module my_adder $end
$var wire 1 Q" a $end
$var wire 1 R" b $end
$var wire 1 S" cin $end
$var wire 1 T" cout $end
$var wire 1 U" sum $end
$upscope $end
$upscope $end
$scope begin genblk000001 $end
$scope module my_adder $end
$var wire 1 V" a $end
$var wire 1 W" b $end
$var wire 1 X" cin $end
$var wire 1 Y" cout $end
$var wire 1 Z" sum $end
$upscope $end
$upscope $end
$scope begin genblk00001 $end
$scope module my_adder $end
$var wire 1 [" a $end
$var wire 1 \" b $end
$var wire 1 ]" cin $end
$var wire 1 ^" cout $end
$var wire 1 _" sum $end
$upscope $end
$upscope $end
$scope begin genblk0001 $end
$scope module my_adder $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 b" cin $end
$var wire 1 c" cout $end
$var wire 1 d" sum $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module my_adder $end
$var wire 1 e" a $end
$var wire 1 f" b $end
$var wire 1 g" cin $end
$var wire 1 h" cout $end
$var wire 1 i" sum $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module my_adder $end
$var wire 1 j" a $end
$var wire 1 k" b $end
$var wire 1 l" cin $end
$var wire 1 m" cout $end
$var wire 1 n" sum $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module my_adder $end
$var wire 1 o" a $end
$var wire 1 p" b $end
$var wire 1 q" cin $end
$var wire 1 r" cout $end
$var wire 1 s" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module b $end
$var wire 32 t" in_a [31:0] $end
$var wire 32 u" in_b [31:0] $end
$var wire 32 v" out [31:0] $end
$var wire 1 w" negative $end
$var wire 1 x" cout $end
$scope module my_sub $end
$var wire 32 y" in_a [31:0] $end
$var wire 32 z" in_b [31:0] $end
$var wire 32 {" out [31:0] $end
$var wire 1 x" cout $end
$var wire 33 |" carry [32:0] $end
$scope begin $gen1[25] $end
$scope module my_adder $end
$var wire 1 }" a $end
$var wire 1 ~" b $end
$var wire 1 !# cin $end
$var wire 1 "# cout $end
$var wire 1 ## sum $end
$upscope $end
$upscope $end
$scope begin $gen1[26] $end
$scope module my_adder $end
$var wire 1 $# a $end
$var wire 1 %# b $end
$var wire 1 &# cin $end
$var wire 1 '# cout $end
$var wire 1 (# sum $end
$upscope $end
$upscope $end
$scope begin $gen1[27] $end
$scope module my_adder $end
$var wire 1 )# a $end
$var wire 1 *# b $end
$var wire 1 +# cin $end
$var wire 1 ,# cout $end
$var wire 1 -# sum $end
$upscope $end
$upscope $end
$scope begin $gen1[28] $end
$scope module my_adder $end
$var wire 1 .# a $end
$var wire 1 /# b $end
$var wire 1 0# cin $end
$var wire 1 1# cout $end
$var wire 1 2# sum $end
$upscope $end
$upscope $end
$scope begin $gen1[29] $end
$scope module my_adder $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 5# cin $end
$var wire 1 6# cout $end
$var wire 1 7# sum $end
$upscope $end
$upscope $end
$scope begin $gen1[30] $end
$scope module my_adder $end
$var wire 1 8# a $end
$var wire 1 9# b $end
$var wire 1 :# cin $end
$var wire 1 ;# cout $end
$var wire 1 <# sum $end
$upscope $end
$upscope $end
$scope begin $gen1[31] $end
$scope module my_adder $end
$var wire 1 =# a $end
$var wire 1 ># b $end
$var wire 1 ?# cin $end
$var wire 1 @# cout $end
$var wire 1 A# sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000000000001 $end
$scope module my_adder $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 D# cin $end
$var wire 1 E# cout $end
$var wire 1 F# sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000000000001 $end
$scope module my_adder $end
$var wire 1 G# a $end
$var wire 1 H# b $end
$var wire 1 I# cin $end
$var wire 1 J# cout $end
$var wire 1 K# sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000000000001 $end
$scope module my_adder $end
$var wire 1 L# a $end
$var wire 1 M# b $end
$var wire 1 N# cin $end
$var wire 1 O# cout $end
$var wire 1 P# sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000000001 $end
$scope module my_adder $end
$var wire 1 Q# a $end
$var wire 1 R# b $end
$var wire 1 S# cin $end
$var wire 1 T# cout $end
$var wire 1 U# sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000000001 $end
$scope module my_adder $end
$var wire 1 V# a $end
$var wire 1 W# b $end
$var wire 1 X# cin $end
$var wire 1 Y# cout $end
$var wire 1 Z# sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000000001 $end
$scope module my_adder $end
$var wire 1 [# a $end
$var wire 1 \# b $end
$var wire 1 ]# cin $end
$var wire 1 ^# cout $end
$var wire 1 _# sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000000001 $end
$scope module my_adder $end
$var wire 1 `# a $end
$var wire 1 a# b $end
$var wire 1 b# cin $end
$var wire 1 c# cout $end
$var wire 1 d# sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000000001 $end
$scope module my_adder $end
$var wire 1 e# a $end
$var wire 1 f# b $end
$var wire 1 g# cin $end
$var wire 1 h# cout $end
$var wire 1 i# sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000000001 $end
$scope module my_adder $end
$var wire 1 j# a $end
$var wire 1 k# b $end
$var wire 1 l# cin $end
$var wire 1 m# cout $end
$var wire 1 n# sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000000001 $end
$scope module my_adder $end
$var wire 1 o# a $end
$var wire 1 p# b $end
$var wire 1 q# cin $end
$var wire 1 r# cout $end
$var wire 1 s# sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000000001 $end
$scope module my_adder $end
$var wire 1 t# a $end
$var wire 1 u# b $end
$var wire 1 v# cin $end
$var wire 1 w# cout $end
$var wire 1 x# sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000000001 $end
$scope module my_adder $end
$var wire 1 y# a $end
$var wire 1 z# b $end
$var wire 1 {# cin $end
$var wire 1 |# cout $end
$var wire 1 }# sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000000001 $end
$scope module my_adder $end
$var wire 1 ~# a $end
$var wire 1 !$ b $end
$var wire 1 "$ cin $end
$var wire 1 #$ cout $end
$var wire 1 $$ sum $end
$upscope $end
$upscope $end
$scope begin genblk000000000001 $end
$scope module my_adder $end
$var wire 1 %$ a $end
$var wire 1 &$ b $end
$var wire 1 '$ cin $end
$var wire 1 ($ cout $end
$var wire 1 )$ sum $end
$upscope $end
$upscope $end
$scope begin genblk00000000001 $end
$scope module my_adder $end
$var wire 1 *$ a $end
$var wire 1 +$ b $end
$var wire 1 ,$ cin $end
$var wire 1 -$ cout $end
$var wire 1 .$ sum $end
$upscope $end
$upscope $end
$scope begin genblk0000000001 $end
$scope module my_adder $end
$var wire 1 /$ a $end
$var wire 1 0$ b $end
$var wire 1 1$ cin $end
$var wire 1 2$ cout $end
$var wire 1 3$ sum $end
$upscope $end
$upscope $end
$scope begin genblk000000001 $end
$scope module my_adder $end
$var wire 1 4$ a $end
$var wire 1 5$ b $end
$var wire 1 6$ cin $end
$var wire 1 7$ cout $end
$var wire 1 8$ sum $end
$upscope $end
$upscope $end
$scope begin genblk00000001 $end
$scope module my_adder $end
$var wire 1 9$ a $end
$var wire 1 :$ b $end
$var wire 1 ;$ cin $end
$var wire 1 <$ cout $end
$var wire 1 =$ sum $end
$upscope $end
$upscope $end
$scope begin genblk0000001 $end
$scope module my_adder $end
$var wire 1 >$ a $end
$var wire 1 ?$ b $end
$var wire 1 @$ cin $end
$var wire 1 A$ cout $end
$var wire 1 B$ sum $end
$upscope $end
$upscope $end
$scope begin genblk000001 $end
$scope module my_adder $end
$var wire 1 C$ a $end
$var wire 1 D$ b $end
$var wire 1 E$ cin $end
$var wire 1 F$ cout $end
$var wire 1 G$ sum $end
$upscope $end
$upscope $end
$scope begin genblk00001 $end
$scope module my_adder $end
$var wire 1 H$ a $end
$var wire 1 I$ b $end
$var wire 1 J$ cin $end
$var wire 1 K$ cout $end
$var wire 1 L$ sum $end
$upscope $end
$upscope $end
$scope begin genblk0001 $end
$scope module my_adder $end
$var wire 1 M$ a $end
$var wire 1 N$ b $end
$var wire 1 O$ cin $end
$var wire 1 P$ cout $end
$var wire 1 Q$ sum $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module my_adder $end
$var wire 1 R$ a $end
$var wire 1 S$ b $end
$var wire 1 T$ cin $end
$var wire 1 U$ cout $end
$var wire 1 V$ sum $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module my_adder $end
$var wire 1 W$ a $end
$var wire 1 X$ b $end
$var wire 1 Y$ cin $end
$var wire 1 Z$ cout $end
$var wire 1 [$ sum $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module my_adder $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 ^$ cin $end
$var wire 1 _$ cout $end
$var wire 1 `$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module c $end
$var wire 32 a$ in_a [31:0] $end
$var wire 32 b$ in_b [31:0] $end
$var wire 32 c$ out [31:0] $end
$var wire 1 d$ cout $end
$upscope $end
$scope module d $end
$var wire 4 e$ flags_n_z_v_c [3:0] $end
$var wire 32 f$ in_a [31:0] $end
$var wire 32 g$ in_b [31:0] $end
$var wire 32 h$ out [31:0] $end
$upscope $end
$scope module e $end
$var wire 4 i$ flags_n_z_v_c [3:0] $end
$var wire 32 j$ in_a [31:0] $end
$var wire 32 k$ in_b [31:0] $end
$var wire 32 l$ out [31:0] $end
$upscope $end
$scope module f $end
$var wire 4 m$ flags_n_z_v_c [3:0] $end
$var wire 32 n$ in_a [31:0] $end
$var wire 32 o$ in_b [31:0] $end
$var wire 32 p$ out [31:0] $end
$upscope $end
$scope module g $end
$var wire 4 q$ flags_n_z_v_c [3:0] $end
$var wire 32 r$ in_a [31:0] $end
$var wire 5 s$ shift [4:0] $end
$var wire 32 t$ out [31:0] $end
$upscope $end
$scope module h $end
$var wire 4 u$ flags_n_z_v_c [3:0] $end
$var wire 32 v$ in_a [31:0] $end
$var wire 5 w$ shift [4:0] $end
$var wire 32 x$ out [31:0] $end
$upscope $end
$scope module i $end
$var wire 4 y$ flags_n_z_v_c [3:0] $end
$var wire 32 z$ in_a [31:0] $end
$var wire 5 {$ shift [4:0] $end
$var wire 32 |$ out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 |$
bz {$
b0 z$
bx0x y$
bx x$
bx w$
b0 v$
bx0x u$
bx t$
bx s$
b0 r$
bx0x q$
b0 p$
b0 o$
b0 n$
bx0x m$
b0 l$
b0 k$
b0 j$
bx0x i$
b0 h$
b0 g$
b0 f$
bx0x e$
0d$
b0 c$
b0 b$
b0 a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
b0 |"
b0 {"
b0 z"
b0 y"
0x"
0w"
b0 v"
b0 u"
b0 t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
b0 1
00
b0 /
b0 .
b0 -
bx ,
b0 +
bx0x *
b0 )
b0 (
b0 '
bx &
b0 %
b0 $
b0 #
b0 "
bx0x !
$end
#1
1x"
1@#
1?#
1;#
1:#
16#
15#
11#
10#
1,#
1+#
1'#
1&#
1"#
1!#
1E#
1D#
1J#
1I#
1O#
1N#
1T#
1S#
1Y#
1X#
1^#
1]#
1c#
1b#
1h#
1g#
1m#
1l#
1r#
1q#
1w#
1v#
1|#
1{#
1#$
1"$
1($
1'$
1-$
1,$
12$
11$
17$
16$
1<$
1;$
1A$
1@$
1F$
1E$
1K$
1T$
1J$
1Z$
1P$
1Y$
1O$
1_$
b111111111111111111111111111111110 |"
1U$
1n"
1l"
b10 1
1r"
0w"
1]$
0[$
1X$
1S$
0Q$
1N$
0L$
1I$
0G$
1D$
0B$
1?$
0=$
1:$
08$
15$
03$
10$
0.$
1+$
0)$
1&$
0$$
1!$
0}#
1z#
0x#
1u#
0s#
1p#
0n#
1k#
0i#
1f#
0d#
1a#
0_#
1\#
0Z#
1W#
0U#
1R#
0P#
1M#
0K#
1H#
0F#
1C#
0##
1~"
0(#
1%#
0-#
1*#
02#
1/#
07#
14#
0<#
19#
0A#
1>#
1p"
b11111111111111111111111111111111 z"
b101 c$
0s"
1o"
b110 /
b110 "
b110 '
1i"
1e"
0`$
1\$
b100 v"
b100 {"
1V$
1R$
b101 h$
b1 l$
b100 p$
b101000000000000000000000000000 |$
b1 $
b1 )
b1 .
b1 u"
b1 b$
b1 g$
b1 k$
b1 o$
b101 #
b101 (
b101 -
b101 t"
b101 y"
b101 a$
b101 f$
b101 j$
b101 n$
b101 r$
b101 v$
b101 z$
#2
b100 "
b100 '
b1 %
b1 +
#3
0V$
0T$
0d"
0b"
0Z$
0h"
1[$
0Y$
0l"
b111111111111111111111111111111000 |"
0_$
0r"
1i"
0g"
b0 1
0m"
b11 v"
b11 {"
1`$
0]$
1s"
0p"
b111 /
1n"
1k"
b11111111111111111111111111111110 z"
b1010 c$
b111 h$
b0 l$
b111 p$
b1010 "
b1010 '
b10 %
b10 +
b10 $
b10 )
b10 .
b10 u"
b10 b$
b10 g$
b10 k$
b10 o$
#4
b111 "
b111 '
b11 %
b11 +
#5
1x"
1@#
0w"
0A#
1?#
1;#
0<#
1:#
16#
07#
15#
11#
02#
10#
1,#
0-#
1+#
1'#
0(#
1&#
1"#
0##
1!#
1E#
0F#
1D#
1J#
0K#
1I#
1O#
0P#
1N#
1T#
0U#
1S#
1Y#
0Z#
1X#
1^#
0_#
1]#
1c#
0d#
1b#
1h#
0i#
1g#
1m#
0n#
1l#
1r#
0s#
1q#
1w#
0x#
1v#
1|#
0}#
1{#
1#$
0$$
1"$
1($
0)$
1'$
1-$
0.$
1,$
12$
03$
11$
17$
08$
16$
1<$
0=$
1;$
1A$
0B$
1@$
1F$
0G$
1E$
1K$
1g"
0L$
1J$
1m"
1P$
1Y$
0Q$
1O$
1l"
1d"
1b"
1_$
1U$
1T$
1r"
b1110 1
1h"
b111111111111111111111111111111110 |"
1Z$
0`$
1]$
0V$
0S$
0s"
1p"
0k"
1i"
1f"
b11111111111111111111111111111011 z"
b1100 /
0n"
1j"
b10 v"
b10 {"
1[$
1W$
b100011 c$
b101 l$
b10 p$
b111000000000000000000000000000 |$
b101 "
b101 '
b100 %
b100 +
b101 $
b101 )
b101 .
b101 u"
b101 b$
b101 g$
b101 k$
b101 o$
b111 #
b111 (
b111 -
b111 t"
b111 y"
b111 a$
b111 f$
b111 j$
b111 n$
b111 r$
b111 v$
b111 z$
#6
0[$
0Y$
0l"
b111111111111111111111111111111100 |"
0_$
b1100 1
0r"
1`$
0]$
b101 v"
b101 {"
1V$
1S$
1s"
0p"
0n"
1k"
b1001 /
0i"
0f"
b11111111111111111111111111111110 z"
b1110 c$
b10 l$
b101 p$
b101 "
b101 '
b101 %
b101 +
b10 $
b10 )
b10 .
b10 u"
b10 b$
b10 g$
b10 k$
b10 o$
#7
0O$
0U$
0g"
0b"
0_"
0]"
0T$
0m"
0h"
b0 1
0c"
b111111111111111111111111111110000 |"
0Z$
0s"
0o"
1n"
0j"
0i"
0e"
b1010 /
1d"
1`"
0`$
0\$
1[$
0W$
1V$
0R$
b110 v"
b110 {"
0Q$
1M$
b10000 c$
b1010 h$
b0 l$
b1010 p$
b1000000000000000000000000000000 |$
b10 "
b10 '
b110 %
b110 +
b10 t$
b0x00 !
b0x00 *
b0x00 e$
b0x00 i$
b0x00 m$
b0x00 q$
b0x00 u$
b0x00 y$
b100000 x$
b10 &
b10 ,
b10 s$
b10 w$
b1000 #
b1000 (
b1000 -
b1000 t"
b1000 y"
b1000 a$
b1000 f$
b1000 j$
b1000 n$
b1000 r$
b1000 v$
b1000 z$
#8
b100000 "
b100000 '
b111 %
b111 +
#9
0x"
0@#
1w"
1A#
0?#
0;#
1<#
0:#
06#
17#
05#
01#
12#
00#
0,#
1-#
0+#
0'#
1(#
0&#
0"#
1##
0!#
0E#
1F#
0D#
0J#
1K#
0I#
0O#
1P#
0N#
0T#
1U#
0S#
0Y#
1Z#
0X#
0^#
1_#
0]#
0c#
1d#
0b#
0h#
1i#
0g#
0m#
1n#
0l#
0r#
1s#
0q#
0w#
1x#
0v#
0|#
1}#
0{#
0#$
1$$
0"$
0($
1)$
0'$
0-$
1.$
0,$
02$
13$
01$
07$
18$
06$
0<$
1=$
0;$
0A$
1B$
0@$
0F$
1G$
0E$
0K$
1L$
0J$
b0 |"
0P$
1s"
1o"
b11 /
0d"
0`"
1`$
1\$
b11111111111111111111111111111111 v"
b11111111111111111111111111111111 {"
1Q$
0M$
b10 c$
b11 h$
b11 p$
b1000000000000000000000000000 |$
b1000 %
b1000 +
b101 &
b101 ,
b101 s$
b101 w$
b0 t$
b100000 x$
b1000000000000000000000000000 "
b1000000000000000000000000000 '
b1 #
b1 (
b1 -
b1 t"
b1 y"
b1 a$
b1 f$
b1 j$
b1 n$
b1 r$
b1 v$
b1 z$
#10
1x"
1@#
0w"
0A#
1?#
1;#
0<#
1:#
16#
07#
15#
11#
02#
10#
1,#
0-#
1+#
1'#
0(#
1&#
1"#
0##
1!#
1E#
0F#
1D#
1J#
0K#
1I#
1O#
0P#
1N#
1T#
0U#
1S#
1Y#
0Z#
1X#
1^#
0_#
1]#
1c#
0d#
1b#
1h#
0i#
1g#
1m#
0n#
1l#
1r#
0s#
1q#
1w#
0x#
1v#
1|#
0}#
1{#
1#$
0$$
1"$
1($
0)$
1'$
1-$
0.$
1,$
12$
03$
11$
17$
08$
16$
1<$
0=$
1;$
1A$
0B$
1@$
1F$
1O$
0G$
1E$
1U$
1K$
1Y$
1l"
1_$
1i"
1g"
1_"
1]"
0V$
1T$
0L$
1J$
1r"
1m"
b10110 1
1c"
1Z$
b111111111111111111111111111111110 |"
1P$
0`$
1]$
0X$
0N$
0s"
1p"
1a"
b11111111111111111111111111110101 z"
1n"
1j"
b10110 /
0d"
1`"
0[$
1W$
b0 v"
b0 {"
0Q$
1M$
b1111001 c$
b1011 h$
b1011 l$
b0 p$
b1011000000000000000000000000000 |$
bx "
bx '
b1001 %
b1001 +
b1011 $
b1011 )
b1011 .
b1011 u"
b1011 b$
b1011 g$
b1011 k$
b1011 o$
b101100000 x$
b1011 #
b1011 (
b1011 -
b1011 t"
b1011 y"
b1011 a$
b1011 f$
b1011 j$
b1011 n$
b1011 r$
b1011 v$
b1011 z$
