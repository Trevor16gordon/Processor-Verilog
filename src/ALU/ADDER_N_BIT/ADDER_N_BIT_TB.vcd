$date
	Mon Oct 30 18:59:26 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ADDER_N_BIT_TB $end
$var wire 4 ! out [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$scope module my_adder $end
$var wire 4 % in_a [3:0] $end
$var wire 4 & in_b [3:0] $end
$var wire 4 ' out [3:0] $end
$var wire 1 " cout $end
$var wire 5 ( carry [4:0] $end
$scope begin genblk0001 $end
$scope module my_adder $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 + cin $end
$var wire 1 , cout $end
$var wire 1 - sum $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module my_adder $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 0 cin $end
$var wire 1 1 cout $end
$var wire 1 2 sum $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module my_adder $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 cin $end
$var wire 1 6 cout $end
$var wire 1 7 sum $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module my_adder $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cin $end
$var wire 1 ; cout $end
$var wire 1 < sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
b0 !
$end
#1
b1 !
b1 '
1<
18
b1 #
b1 %
#2
17
15
b10 (
1;
b10 !
b10 '
0<
19
b1 $
b1 &
#3
0-
0+
01
05
00
0;
b0 (
06
1<
09
12
1/
b111 !
b111 '
17
13
b100 $
b100 &
b11 #
b11 %
#4
15
10
1+
1"
1;
16
11
b11110 (
1,
0<
19
17
14
1*
12
1.
b1110 !
b1110 '
1-
1)
b1111 $
b1111 &
b1111 #
b1111 %
