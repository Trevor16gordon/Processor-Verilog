$date
	Fri Nov  3 15:43:45 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SUBTRACTOR_N_BIT_TB $end
$var wire 4 ! out [3:0] $end
$var wire 1 " neg $end
$var wire 1 # cout $end
$var reg 4 $ a [3:0] $end
$var reg 4 % b [3:0] $end
$scope module my_subtractor $end
$var wire 4 & in_a [3:0] $end
$var wire 4 ' in_b [3:0] $end
$var wire 4 ( out [3:0] $end
$var wire 1 " negative $end
$var wire 1 # cout $end
$scope module my_sub $end
$var wire 4 ) in_a [3:0] $end
$var wire 4 * in_b [3:0] $end
$var wire 4 + out [3:0] $end
$var wire 1 # cout $end
$var wire 5 , carry [4:0] $end
$scope begin genblk0001 $end
$scope module my_adder $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 / cin $end
$var wire 1 0 cout $end
$var wire 1 1 sum $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module my_adder $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 cin $end
$var wire 1 5 cout $end
$var wire 1 6 sum $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module my_adder $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module my_adder $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 ? cout $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
0#
0"
b0 !
$end
#1
b1 !
b1 (
b1 +
1@
1<
b1 $
b1 &
b1 )
#2
1#
10
1/
15
14
1:
19
b11110 ,
1?
0"
0@
1=
0;
18
06
13
b0 !
b0 (
b0 +
01
1.
b1111 *
b1 %
b1 '
#3
0#
00
1"
11
0/
05
16
04
0:
09
b0 ,
0?
1@
0=
08
b1100 *
b1111 !
b1111 (
b1111 +
1;
17
b100 %
b100 '
b11 $
b11 &
b11 )
#4
14
1:
0;
19
1?
1/
1#
15
b11110 ,
10
0@
1=
03
0.
0"
b1 *
06
12
b0 !
b0 (
b0 +
01
1-
b1111 %
b1111 '
b1111 $
b1111 &
b1111 )
